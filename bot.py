# -*- coding: utf-8 -*-
"""
Created on Wed Jun 11 18:34:15 2025

@author: Polina Smagina
"""

from flask import Flask, request
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
)
import asyncio

app = Flask(__name__)
TOKEN = '7552462255:AAEkMMPlsedRLloda5E30cbmQs9jE_BFLho'

import os
TOKEN = os.getenv("TOKEN")
# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = Application.builder().token(TOKEN).build()

# –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
categories = {
    "–ü–æ–∫—É—à": [
        {
            "name": "–ó–∞–≤—Ç—Ä–∞–∫",
            "description": "–ò–¥–µ–∏ –¥–ª—è –≤–∫—É—Å–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è ‚òÄÔ∏è",
            "images": [
                {"url": "https://drive.google.com/file/d/1FJADhUvoAQRRojpzsSueiLUZ_MaFpCfQ/view?usp=sharing", "caption": "–û–ª–∞–¥—É—à–∫–∏ü•û"},
                {"url": "", "caption": "–Ø–∏—á–Ω–∏—Ü–∞üç≥"},
                {"url": "", "caption": "–ö–∞—à–∞ü•£"},
                {"url": "", "caption": "–ì–æ—Ä—è—á–∏–µ –±—É—Ç–µ—Ä–±—Ä–æ–¥–∏–∫–∏ü•™"},
                {"url": "", "caption": "–°—ã—Ä–Ω–∏–∫–∏ü•Ø"}
            ]
        },
        {
            "name": "–û–±–µ–¥-—É–∂–∏–Ω",
            "description": "–•–æ—á–µ—Ç—Å—è —Å—ã—Ç–Ω–æ –ø–æ–µ—Å—Ç—å üçΩÔ∏èÔ∏è",
            "images": [
                {"url": "", "caption": "–¢–æ–º —è–ºüçõ"},
                {"url": "", "caption": "–°–∞–º—Å–∞ü´ì"},
                {"url": "", "caption": "–ë—É—Ä–≥–∏—Äüçî"},
                {"url": "", "caption": "–ü–∞—Å—Ç–∞üçù"},
                {"url": "", "caption": "–®–∞–≤–µ—Ä–º–∞üåØ"},
                {"url": "", "caption": "–°—É—à–∏üç£"},
                {"url": "", "caption": "–ó–∞–ø–µ—á–µ–Ω–Ω–æ–µ —Ä–∞–≥—Éü•ò"}
             ]
        },
        {
            "name": "–í–∫—É—Å–Ω—è—à–∫–∏",
            "description": "–•–æ—á–µ—Ç—Å—è —Å–ª–∞–¥–æ—Å—Ç–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å üßÅ",
            "images": [
                {"url": "", "caption": "–°–∏–Ω–∞–±–æ–Ω—ãüçÆ"},
                {"url": "", "caption": "–¢–æ—Ä—Ç–∏–∫üç∞"},
                {"url": "", "caption": "–ü–µ—á–µ–Ω—å–∫–∏üç™"}
            ]
        },
    ],
    "–•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞, –≤—ã—Ö–æ–¥–∏–º –Ω–∞ —É–ª–∏—Ü—É!": [
            {
                "name": "–°–∞–ø–±–æ—Ä–¥—ã",
                "description": "–¢–µ–ø–ª–æ, –±–µ–≥–æ–º –∫–∞—Ç–∞—Ç—å—Å—èÔ∏è",
                "images": [
                    {"url": "https://optim.tildacdn.com/tild3462-6565-4230-b235-303364363665/-/format/webp/photo.jpg.webp", "caption": "–†–µ–∫–∞ –û—Ä–µ–¥–µ–∂"},
                    {"url": "", "caption": "–°–∞–º–∏–º –≤–∑—è—Ç—å —Å–∞–ø –∏ –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ"}
            ]
        },
        {
                "name": "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä",
                "description": "–ë–∞–∑–æ–≤–∞—è —Å–≤–∏–¥–∞–Ω–∫–∞Ô∏è",
                "images": [
                    {"url": "", "caption": "–ö–∏–Ω–æ–æ–æ"},
                    {"url": "", "caption": "–§–∏–ª—å–º –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ"}
            ]
        },
        {
                "name": "–ö—É–ª—å—Ç—É—Ä–Ω–æ –æ–±–æ–≥–∞—â–∞–µ–º—Å—è",
                "description": "–¢–∞–∫ —É–∂ –∏ –±—ã—Ç—å –±–µ–∑ –∫—Ä–æ—Å—Å–≤–æ—Ä–¥–æ–≤Ô∏è",
                "images": [
                    {"url": "", "caption": "–¢–µ–∞—Ç—Ä"},
                    {"url": "", "caption": "–ú—É–∑–µ–π"}
            ]
        },
        {
                "name": "–ü–æ–µ–∑–¥–∫–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–µ",
                "description": "–ù–∞—á–Ω–µ–º —Å —Ç–∞–∫–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–πÔ∏è",
                "images": [
                    {"url": "", "caption": "–í—ã–±–æ—Ä–≥"},
                    {"url": "", "caption": "–ü–µ—Ç–µ—Ä–≥–æ—Ñ"},
                    {"url": "", "caption": "–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç"},
                    {"url": "", "caption": "–†–∞–∑–Ω—ã–µ –≥–æ—Ä–æ–¥–∫–∏ –≤ –õ–û"}
            ]
        },
        {
                "name": "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ üòä",
                "description": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–ø–ª—É—é –ø–æ–≥–æ–¥—ÉÔ∏è",
                "images": [
                    {"url": "", "caption": "–õ–∞–¥–æ–∂—Å–∫–æ–µ –æ–∑–µ—Ä–æ"},
                    {"url": "", "caption": "–í–µ—Ä–µ–≤–æ—á–Ω—ã–π –ø–∞—Ä–∫ (–ö–æ—à–∫–∏–Ω–æ)"},
                    {"url": "", "caption": "–í–µ—Ä–µ–≤–æ—á–Ω—ã–π –ø–∞—Ä–∫ (–°–ü–ë)"},
                    {"url": "", "caption": "–ú–∞–∑–∞–ø–∞—Ä–∫"},
                    {"url": "https://cdn.culture.ru/images/6d028ee8-9812-5996-9a22-8c605e38fa38", "caption": "–ü–æ–∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞—Ö"},
                    {"url": "", "caption": "–ü–æ–≥—É–ª—è—Ç—å –≤ –ø–∞—Ä–∫–µ"}
            ]
        },
        {
                "name": "–¢–µ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å",
                "description": "–ü–æ–ª–Ω—ã–π —Ä–µ–ª–∞–∫—ÅÔ∏è",
                "images": [
                    {"url": "https://newreportage.ru/wp-content/uploads/2023/03/IMG_20230325_224229.jpg", "caption": "https://greenflowlakhtapark.ru/price"}
            ]
        },
    ],
    "–ü–æ—Å–∏–¥–µ–ª–∫–∏ –¥–æ–º–∞": [
            {
                "name": "–ü–æ—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ –º–æ–ª—å–±–µ—Ä—Ç–∞—Ö",
                "description": "–ë—É–¥–µ–º —Ä–∞–∑—É–∫—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω—É –∏–ª–∏ —Å–∞–º–∏ –Ω–∞—Ä–∏—Å—É–µ–º, –≤—Å–µ —Ä–∞–≤–Ω–æ –º–∏–ª–∏ –º–∏–ª–∏Ô∏è",
                "images": [
                    {"url": "", "caption": "–õ—è–ª—è–ª—è"}
            ]
        },
        {
                "name": "–ü–æ–ª–µ–ø–∏—Ç—å –∏–∑ –≥–ª–∏–Ω—ã",
                "description": "–ë—É–¥–µ—Ç —Ç–µ–±–µ –ø–µ–ø–µ–ª—å–Ω–∏—Ü–∞:D",
                "images": [
                    {"url": "", "caption": "–†—É–∫–æ–¥–µ–ª—å–Ω–∏—á–∞—Ç—å –±—É–¥–µ–º"}
            ]
        },
        {
                "name": "–ü–æ–∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏",
                "description": "–ù–∞–π–¥–µ–º –∏–≥—Ä—ã –¥–ª—è –¥–≤–æ–∏—ÖÔ∏è",
                "images": [
                    {"url": "", "caption": "–£—é—Ç–Ω–∏ –≤–µ—á–µ—Ä"}
            ]
        },
        {
                "name": "–ü–æ–ª–µ–ø–∏—Ç—å –∏–∑ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –ø–ª–∞—Å—Ç–∏–ª–∏–Ω–∞",
                "description": "–ü–ª–∞—Å—Ç–∏–ª–∏–Ω–æ–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –∏–∑ —Ä–∏–ª—Å–æ–≤Ô∏è",
                "images": [
                    {"url": "", "caption": "–ú–∏–ª—ã–µ —Ñ–∏–≥—É—Ä–∫–∏"}
            ]
        },
    ],
        "–ö–∏–Ω–æ–≤–µ—á–µ—Ä": [
            {
                "name": "–ö–æ–º–µ–¥–∏—è",
                "description": "–õ–µ–≥–∫–∏–µ —Ñ–∏–ª—å–º—ãÔ∏è",
                "images": [
                    {"url": "", "caption": "–û–¥–Ω–∞–∂–¥—ã –≤ –ì–æ–ª–ª–∏–≤—É–¥–µ"},
                    {"url": "", "caption": "–õ–∏–ª–æ –∏ –°—Ç–∏—á"}
            ]
        },
        {
                "name": "–¢—Ä–∏–ª–ª–µ—Ä—ã/—É–∂–∞—Å—ã",
                "description": "–ñ—É—Ç–∫–æ –∂—É—Ç–∫–æ",
                "images": [
                    {"url": "", "caption": "–°–æ–ª–Ω—Ü–µ–°—Ç–æ—è–Ω–∏–µ"},
                    {"url": "", "caption": "–õ–µ–≤–∏–∞—Ñ–∞–Ω"},
                    {"url": "", "caption": "–ù–æ—Å—Ñ–µ—Ä–∞—Ç—É"}
            ]
        },
        {
                "name": "–î—Ä–∞–º–∞",
                "description": "–ë—É–¥–µ–º –ø–ª–∞–∫–∞—Ç—å –≤–º–µ—Å—Ç–µ?Ô∏è",
                "images": [
                    {"url": "", "caption": "–ü–æ—Ö–æ—Ä–æ–Ω–∏—Ç–µ –º–µ–Ω—è –∑–∞ –ø–ª–∏–Ω—Ç—É—Å–æ–º"},
                    {"url": "", "caption": "–°–∫–∞–∑–æ—á–Ω–∏–∫"},
                    {"url": "", "caption": "–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞"},
                    {"url": "", "caption": "–í–µ—á–Ω–æ–µ —Å–∏—è–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ —Ä–∞–∑—É–º–∞"},
                    {"url": "", "caption": "–ò—Å–∫—É–ø–ª–µ–Ω–∏–µ"},
                    {"url": "", "caption": "–ú–∞–ª—å—á–∏–∫ –≤ –ø–æ–ª–æ—Å–∞—Ç–æ–π –ø–∏–∂–∞–º–µ"},
                    {"url": "", "caption": "–°–ø–∏—Å–æ–∫ –®–∏–Ω–¥–ª–µ—Ä–∞"},
                    {"url": "", "caption": "–≠–¥–≤–∞—Ä–¥ —Ä—É–∫–∏-–Ω–æ–∂–Ω–∏—Ü—ã"}
            ]
        },
        {
                "name": "–ú—É–ª—å—Ç–∏–∫–∏",
                "description": "–ú–∏–ª—ã–π –≤–µ—á–µ—Ä–æ—á–µ–∫Ô∏è",
                "images": [
                    {"url": "", "caption": "–û—Å—Ç—Ä–æ–≤ —Å–æ–±–∞–∫"},
                    {"url": "", "caption": "–ö–æ—à–º–∞—Ä –ø–µ—Ä–µ–¥ –†–æ–∂–¥–µ—Å—Ç–≤–æ–º"},
                    {"url": "", "caption": "–¢—Ä—É–ø –Ω–µ–≤–µ—Å—Ç—ã"},
                    {"url": "", "caption": "–î–∏–∫–∏–π —Ä–æ–±–æ—Ç"},
                    {"url": "", "caption": "–ú–µ—á –≤ –∫–∞–º–Ω–µ"}
            ]
        },
        {
                "name": "–°–µ—Ä–∏–∞–ª—ã",
                "description": "–ó–∞—Å—è–¥–µ–º –¥–æ–º–∞ –ø–æ–¥ –æ–¥–µ—è–ª–∫–æ–ºÔ∏è",
                "images": [
                    {"url": "", "caption": "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤"},
                    {"url": "", "caption": "–ê—Ç–ª–∞–Ω—Ç–∞"}
            ]
        }

    ]
}

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç–∏–∫! –ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ç—ã –≤ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ))) –ó–¥–µ—Å—å —è –Ω–∞–∫–∏–¥–∞–ª–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∏–∫–∏ –¥–ª—è –Ω–∞—à–µ–≥–æ –¥–æ—Å—É–≥–∞.\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∞ –ø–æ—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç!\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/menu ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/restart ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    )
    await update.message.reply_text(text)
    await show_categories(update)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_categories(update)

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def show_categories(update_or_query):
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat|{cat}")] for cat in categories]
    markup = InlineKeyboardMarkup(keyboard)
    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_text("–ß–µ–≥–æ –±—ã –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å:", reply_markup=markup)
    else:
        await update_or_query.edit_message_text("–ß–µ–≥–æ –±—ã –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å:", reply_markup=markup)

async def show_variants(category, query):
    items = categories.get(category, [])
    keyboard = [[InlineKeyboardButton(item["name"], callback_data=f"item|{category}|{i}")]
                for i, item in enumerate(items)]
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category}*:", reply_markup=markup, parse_mode='Markdown')

async def show_item_detail(category, index, query):
    item = categories[category][int(index)]
    media = []
    for image in item['images']:
        media.append(InputMediaPhoto(media=image['url'], caption=image['caption'], parse_mode='Markdown'))

    await query.message.delete()
    await query.message.chat.send_media_group(media=media)

    keyboard = [[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"cat|{category}")]]
    markup = InlineKeyboardMarkup(keyboard)
    await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:", reply_markup=markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back_to_menu":
        await show_categories(query)
    elif data.startswith("cat|"):
        category = data.split("|")[1]
        await show_variants(category, query)
    elif data.startswith("item|"):
        _, category, index = data.split("|")
        await show_item_detail(category, index, query)

# –ü–æ–ª—É—á–µ–Ω–∏–µ file_id
async def get_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        await update.message.reply_text(f"file_id: {file_id}")
    elif update.message.document:
        file_id = update.message.document.file_id
        await update.message.reply_text(f"file_id: {file_id}")
    else:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("menu", menu))
application.add_handler(CommandHandler("restart", restart))
application.add_handler(CallbackQueryHandler(button_handler))
application.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, get_file_id))

# Flask webhook
@app.route(f"/{TOKEN}", methods=["POST"])
async def webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return 'ok'

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    app.run(port=5000)